#!/bin/bash

# Script to launch the Manager CLI Web Interface
# Author: Jackson Makl
# Date: March 19, 2025

echo "==============================================="
echo "  Launching Manager CLI Web Interface"
echo "==============================================="

# Define path to the web application
APP_DIR="$(pwd)/manager-web-app"

# Create the application directory if it doesn't exist
if [ ! -d "$APP_DIR" ]; then
    mkdir -p "$APP_DIR"
    echo "[+] Created application directory: $APP_DIR"
fi

# Save the HTML file to the application directory
cat > "$APP_DIR/index.html" << 'EOL'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Container Manager</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #4F46E5;
            --primary-dark: #4338CA;
            --primary-light: #EEF2FF;
            --secondary: #64748B;
            --success: #10B981;
            --info: #0EA5E9;
            --warning: #F59E0B;
            --danger: #EF4444;
            --light: #F8FAFC;
            --dark: #1E293B;
            --surface: #FFFFFF;
            --bg: #F1F5F9;
            --border: #E2E8F0;
            --text: #0F172A;
            --text-secondary: #64748B;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --transition: all 0.2s ease-in-out;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            background-color: var(--bg);
            color: var(--text);
            line-height: 1.6;
        }

        .container {
            max-width: 1100px;
            margin: 40px auto;
            padding: 0 24px;
        }

        .app-header {
            display: flex;
            align-items: center;
            margin-bottom: 32px;
        }

        .app-header h1 {
            font-weight: 700;
            font-size: 28px;
            color: var(--text);
            margin-left: 16px;
            letter-spacing: -0.5px;
        }

        .app-header .logo {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            width: 52px;
            height: 52px;
            border-radius: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            box-shadow: 0 3px 10px rgba(79, 70, 229, 0.3);
        }

        .app-header .version {
            margin-left: auto;
            background-color: var(--primary-light);
            color: var(--primary-dark);
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
        }

        .card {
            background-color: var(--surface);
            border-radius: 16px;
            box-shadow: var(--shadow);
            padding: 24px;
            margin-bottom: 28px;
            transition: var(--transition);
            border: 1px solid var(--border);
        }

        .card:hover {
            box-shadow: var(--shadow-lg);
            transform: translateY(-2px);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 16px;
            margin-bottom: 20px;
            border-bottom: 1px solid var(--border);
        }

        .card-header h2 {
            font-weight: 600;
            font-size: 20px;
            color: var(--text);
            display: flex;
            align-items: center;
        }

        .card-header h2 i {
            margin-right: 12px;
            color: var(--primary);
            font-size: 18px;
        }

        .form-group {
            margin-bottom: 24px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            font-size: 15px;
            color: var(--text);
        }

        .input-wrapper {
            position: relative;
        }

        .input-wrapper i {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-secondary);
        }

        input[type="text"],
        input[type="password"] {
            width: 100%;
            padding: 12px 16px 12px 46px;
            border: 1px solid var(--border);
            border-radius: 12px;
            font-size: 15px;
            transition: var(--transition);
            background-color: var(--surface);
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        input[type="text"]:focus,
        input[type="password"]:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.15);
        }

        .input-help {
            margin-top: 6px;
            font-size: 13px;
            color: var(--text-secondary);
        }

        .checkbox-container {
            display: flex;
            align-items: center;
            margin-top: 12px;
        }

        .checkbox-container input[type="checkbox"] {
            margin-right: 10px;
            width: 18px;
            height: 18px;
            accent-color: var(--primary);
            cursor: pointer;
        }

        .checkbox-container label {
            margin-bottom: 0;
            font-size: 14px;
            color: var(--text);
            cursor: pointer;
        }

        .command-section {
            margin-top: 28px;
        }

        .section-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 16px;
            color: var(--text);
            display: flex;
            align-items: center;
        }

        .section-title i {
            margin-right: 10px;
            color: var(--primary);
        }

        .actions {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
            gap: 16px;
            margin-bottom: 24px;
        }

        button {
            padding: 12px 16px;
            border: none;
            border-radius: 12px;
            background-color: var(--primary);
            color: white;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            height: 45px;
        }

        button:hover {
            filter: brightness(1.1);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        button:active {
            transform: translateY(0);
            filter: brightness(0.95);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        button i {
            margin-right: 8px;
        }

        /* Button colors */
        .btn-initialize { 
            background-color: var(--secondary); 
            background: linear-gradient(135deg, var(--secondary), #4B5563);
        }
        .btn-push { 
            background-color: var(--primary); 
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        }
        .btn-pull { 
            background-color: var(--info); 
            background: linear-gradient(135deg, var(--info), #0284C7);
        }
        .btn-stop { 
            background-color: var(--danger); 
            background: linear-gradient(135deg, var(--danger), #DC2626);
        }
        .btn-start { 
            background-color: var(--success); 
            background: linear-gradient(135deg, var(--success), #059669);
        }
        .btn-restart { 
            background-color: var(--warning); 
            background: linear-gradient(135deg, var(--warning), #D97706);
        }
        .btn-add { 
            background-color: var(--primary-dark); 
            background: linear-gradient(135deg, #6366F1, var(--primary-dark));
        }
        .btn-list { 
            background-color: var(--secondary); 
            background: linear-gradient(135deg, #64748B, #475569);
        }

        .output-container {
            margin-top: 24px;
        }

        .card-header .actions-menu {
            display: flex;
            gap: 12px;
        }

        .card-header .actions-menu button {
            background-color: transparent;
            color: var(--text-secondary);
            box-shadow: none;
            padding: 6px;
            height: auto;
            border-radius: 8px;
        }

        .card-header .actions-menu button:hover {
            background-color: var(--bg);
            color: var(--primary);
            transform: none;
            box-shadow: none;
        }

        .terminal-header {
            background-color: #1A1A1A;
            color: #E0E0E0;
            padding: 10px 16px;
            border-radius: 12px 12px 0 0;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            font-size: 14px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .terminal-header .dots {
            display: flex;
            gap: 6px;
        }

        .terminal-header .dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .terminal-header .dot-red { background-color: #FF5F56; }
        .terminal-header .dot-yellow { background-color: #FFBD2E; }
        .terminal-header .dot-green { background-color: #27C93F; }

        .terminal {
            background-color: #1E1E1E;
            color: #F8F8F8;
            padding: 16px;
            border-radius: 0 0 12px 12px;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            font-size: 14px;
            line-height: 1.6;
            white-space: pre-wrap;
            overflow-y: auto;
            max-height: 400px;
            min-height: 200px;
        }

        .terminal::before {
            content: "$ ";
            color: #27C93F;
        }

        .loading {
            display: none;
            text-align: center;
            margin: 20px 0;
        }

        .spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid rgba(79, 70, 229, 0.2);
            border-radius: 50%;
            border-top-color: var(--primary);
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .status-bar {
            margin-top: 36px;
            color: var(--text-secondary);
            font-size: 14px;
            display: flex;
            justify-content: space-between;
            padding-top: 20px;
            border-top: 1px solid var(--border);
        }

        .badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            margin-left: 12px;
        }

        .badge-primary {
            background-color: var(--primary-light);
            color: var(--primary-dark);
        }

        .tooltip {
            position: relative;
            display: inline-block;
            cursor: help;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: var(--dark);
            color: white;
            text-align: center;
            border-radius: 8px;
            padding: 8px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 12px;
            box-shadow: var(--shadow);
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

        @media (max-width: 768px) {
            .container {
                padding: 0 16px;
                margin: 24px auto;
            }
            
            .actions {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .card {
                padding: 20px;
            }
            
            .app-header .version {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="app-header">
            <div class="logo">
                <i class="fas fa-cubes"></i>
            </div>
            <h1>Container Manager</h1>
            <span class="version">v2.1.0</span>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h2><i class="fas fa-cog"></i>Configuration</h2>
                <div class="actions-menu">
                    <button title="Import settings" aria-label="Import settings">
                        <i class="fas fa-file-import"></i>
                    </button>
                    <button title="Export settings" aria-label="Export settings">
                        <i class="fas fa-file-export"></i>
                    </button>
                </div>
            </div>
            
            <div class="form-group">
                <label for="github-key">GitHub Personal Access Token</label>
                <div class="input-wrapper">
                    <i class="fas fa-key"></i>
                    <input type="password" id="github-key" placeholder="Enter your GitHub Personal Access Token">
                </div>
                <div class="input-help">Your GitHub token will be used for repository operations.</div>
                <div class="checkbox-container">
                    <input type="checkbox" id="remember-key" checked>
                    <label for="remember-key">Remember token</label>
                </div>
            </div>

            <div class="form-group">
                <label for="repo-name">Repository Name</label>
                <div class="input-wrapper">
                    <i class="fas fa-code-branch"></i>
                    <input type="text" id="repo-name" placeholder="Enter repository name">
                </div>
                <div class="input-help">The repository name without the organization prefix.</div>
                <div class="checkbox-container">
                    <input type="checkbox" id="remember-repo" checked>
                    <label for="remember-repo">Remember repository</label>
                </div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h2><i class="fas fa-terminal"></i>Operations</h2>
            </div>
            
            <div class="command-section">
                <div class="section-title">
                    <i class="fab fa-git-alt"></i> Git Operations
                </div>
                <div class="actions" id="git-actions">
                    <button class="btn-initialize tooltip" onclick="executeCommand('create-repo')">
                        <i class="fas fa-code-branch"></i> Initialize
                        <span class="tooltiptext">Initialize a new Git repository</span>
                    </button>
                    <button class="btn-push tooltip" onclick="executeCommand('push-repo')">
                        <i class="fas fa-upload"></i> Push
                        <span class="tooltiptext">Push changes to the remote repository</span>
                    </button>
                    <button class="btn-pull tooltip" onclick="executeCommand('pull-repo')">
                        <i class="fas fa-download"></i> Pull
                        <span class="tooltiptext">Pull latest changes from the remote repository</span>
                    </button>
                </div>
            </div>
            
            <div class="command-section">
                <div class="section-title">
                    <i class="fas fa-server"></i> Container Operations
                </div>
                <div class="actions" id="container-actions">
                    <button class="btn-stop tooltip" onclick="executeCommand('stop-containers')">
                        <i class="fas fa-stop-circle"></i> Stop
                        <span class="tooltiptext">Stop all running containers</span>
                    </button>
                    <button class="btn-start tooltip" onclick="executeCommand('start-containers')">
                        <i class="fas fa-play-circle"></i> Start
                        <span class="tooltiptext">Start all containers</span>
                    </button>
                    <button class="btn-restart tooltip" onclick="executeCommand('get-logs')">
                        <i class="fas fa-file-alt"></i> Logs
                        <span class="tooltiptext">View Logs From Latest Launch</span>
                    </button>
                    <button class="btn-add tooltip" onclick="executeCommand('add-container')">
                        <i class="fas fa-plus-circle"></i> Add
                        <span class="tooltiptext">Add a new container</span>
                    </button>
                    <button class="btn-list tooltip" onclick="executeCommand('containers-list')">
                        <i class="fas fa-list"></i> List
                        <span class="tooltiptext">List all containers</span>
                    </button>
                </div>
            </div>
        </div>
        
        <div class="card output-container">
            <div class="card-header">
                <h2><i class="fas fa-desktop"></i>Command Output</h2>
                <div class="actions-menu">
                    <button title="Clear output" aria-label="Clear output" onclick="clearOutput()">
                        <i class="fas fa-eraser"></i>
                    </button>
                    <button title="Copy to clipboard" aria-label="Copy to clipboard" onclick="copyOutput()">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>
            </div>
            
            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>Executing command, please wait...</p>
            </div>
            
            <div class="terminal-header">
                <span>terminal@container-manager</span>
                <div class="dots">
                    <div class="dot dot-red"></div>
                    <div class="dot dot-yellow"></div>
                    <div class="dot dot-green"></div>
                </div>
            </div>
            <div class="terminal" id="output">No command executed yet.</div>
        </div>
        
        <div class="status-bar">
            <div>Manager CLI Web Interface <span class="badge badge-primary">Beta</span></div>
            <div>© 2025 Jackson Makl</div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', async function() {
        // Load from localStorage
        const savedGithubKey = localStorage.getItem('githubKey');
        const savedRepoName = localStorage.getItem('repoName');
    
        if (savedGithubKey) {
            document.getElementById('github-key').value = savedGithubKey;
        }
    
        if (savedRepoName) {
            document.getElementById('repo-name').value = savedRepoName;
        }
    
        // Also attempt to load from the file
        try {
            const response = await fetch('/load-config');
            if (response.ok) {
                const config = await response.json();
                if (config.githubKey) {
                    document.getElementById('github-key').value = config.githubKey;
                    localStorage.setItem('githubKey', config.githubKey);
                }
                if (config.repoName) {
                    document.getElementById('repo-name').value = config.repoName;
                    localStorage.setItem('repoName', config.repoName);
                }
            }
        } catch (error) {
            console.error('Error loading config from file:', error);
        }
    
        // Listen for input changes and save both locally and to file
        const saveToStorageAndFile = () => {
            const githubKey = document.getElementById('github-key').value;
            const repoName = document.getElementById('repo-name').value;
    
            localStorage.setItem('githubKey', githubKey);
            localStorage.setItem('repoName', repoName);
    
            fetch('/save-config', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ githubKey, repoName })
            }).catch(err => console.error('Error saving config:', err));
        };
    
        document.getElementById('github-key').addEventListener('input', saveToStorageAndFile);
        document.getElementById('repo-name').addEventListener('input', saveToStorageAndFile);
    });

        
        function executeCommand(command) {
            const githubKey = document.getElementById('github-key').value;
            const repoName = document.getElementById('repo-name').value;
            const outputElement = document.getElementById('output');
            const loadingElement = document.getElementById('loading');
            const rememberKey = document.getElementById('remember-key').checked;
            const rememberRepo = document.getElementById('remember-repo').checked;
            
            // Validate inputs
            if (!githubKey || !repoName) {
                outputElement.textContent = "Error: GitHub Personal Access Token and Repository Name are required!";
                return;
            }
            
            if (rememberKey) {
                localStorage.setItem('githubKey', githubKey);
            } else {
                localStorage.removeItem('githubKey');
            }
            
            if (rememberRepo) {
                localStorage.setItem('repoName', repoName);
            } else {
                localStorage.removeItem('repoName');
            }
            
            // Show loading indicator
            loadingElement.style.display = 'block';
            outputElement.textContent = `Executing ${command}...`;
            
            // Make a fetch request to the backend to execute the command
            fetch('/api/execute', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    command: command,
                    githubKey: githubKey,
                    repoName: repoName
                })
            })
            .then(response => response.json())
            .then(data => {
                loadingElement.style.display = 'none';
                outputElement.textContent = data.output;
            })
            .catch(error => {
                loadingElement.style.display = 'none';
                outputElement.textContent = `Error executing command: ${error.message}`;
            });
        }
        
        function clearOutput() {
            document.getElementById('output').textContent = 'Output cleared.';
        }
        
        function copyOutput() {
            const output = document.getElementById('output').textContent;
            navigator.clipboard.writeText(output)
                .then(() => {
                    // Show a temporary success message
                    const originalText = document.getElementById('output').textContent;
                    document.getElementById('output').textContent = 'Output copied to clipboard!';
                    setTimeout(() => {
                        document.getElementById('output').textContent = originalText;
                    }, 1500);
                })
                .catch(err => {
                    console.error('Failed to copy: ', err);
                });
        }
    </script>
</body>
</html>
EOL
echo "[+] Saved web application HTML file"

# Create the server.js file for the backend
cat > "$APP_DIR/server.js" << 'EOL'
const fs = require('fs');
const express = require('express');
const { exec } = require('child_process');
const bodyParser = require('body-parser');
const path = require('path');
const app = express();
const port = 1100;

// Middleware for parsing JSON
app.use(bodyParser.json());

// Serve static files
app.use(express.static(path.join(__dirname)));

// Helper function to execute commands
const executeCommand = (command, githubKey, repoName) => {
    let cmdToExecute = '';
    
    switch(command) {
        case 'create-repo':
            cmdToExecute = `bash ../bin/initialize ${githubKey} ${repoName}`;
            break;
        case 'push-repo':
            cmdToExecute = `cd ~/manager/manager-web-app && bash ~/manager/bin/push ${githubKey} ${repoName} `;
            break;
        case 'pull-repo':
            cmdToExecute = `cd ~/manager/manager-web-app && bash ~/manager/bin/pull ${githubKey} ${repoName} `;
            break;
        case 'stop-containers':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && bash ~/manager/bin/stop ${githubKey} ${repoName} `;
            break;
        case 'start-containers':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && bash ~/manager/bin/start ${githubKey} ${repoName} `;
            break;
        case 'deploy':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && bash bin/deploy`;
            break;
        case 'get-logs':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName}/logs && cat *.log`;
            break;
        case 'add-container':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && bash ~/manager/bin/add ${repoName} `;
            break;
        case 'containers-list':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && sudo bash ~/manager/bin/containers-list `;
            break;
        default:
            return { error: 'Invalid command' };
    }
    
    return new Promise((resolve, reject) => {
        exec(cmdToExecute, (error, stdout, stderr) => {
            if (error) {
                reject(`Error executing command: ${error.message}\n${stderr}`);
            } else {
                resolve(stdout);
            }
        });
    });
};

app.post('/save-config', (req, res) => {
    fs.writeFileSync('config.json', JSON.stringify(req.body, null, 2));
    res.sendStatus(200);
});

app.get('/load-config', (req, res) => {
    if (fs.existsSync('config.json')) {
        const config = JSON.parse(fs.readFileSync('config.json'));
        res.json(config);
    } else {
        res.json({});
    }
});

// API endpoint to execute commands
app.post('/api/execute', async (req, res) => {
    const { command, githubKey, repoName } = req.body;
    
    try {
        const output = await executeCommand(command, githubKey, repoName);
        res.json({ output });
    } catch (error) {
        res.status(500).json({ output: error });
    }
});

// Route for the main page
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Auto-start containers on server start if credentials are available
const autoStartContainers = async () => {
    console.log("Checking for saved credentials to auto-start containers...");
    
    try {
        if (fs.existsSync('config.json')) {
            const config = JSON.parse(fs.readFileSync('config.json'));
            
            if (config.githubKey && config.repoName) {
                console.log(`Found credentials for repository: ${config.repoName}`);
                console.log("Auto-starting containers...");
                
                try {
                    const output = await executeCommand('start-containers', config.githubKey, config.repoName);
                    console.log("Auto-start successful:");
                    console.log(output);
                } catch (error) {
                    console.error("Error during auto-start:", error);
                }
            } else {
                console.log("No complete credentials found. Skipping auto-start.");
            }
        } else {
            console.log("No config file found. Skipping auto-start.");
        }
    } catch (error) {
        console.error("Error during auto-start check:", error);
    }
};

// Start the server
app.listen(port, () => {
    console.log(`Manager CLI Web Interface running at http://localhost:${port}`);
    // Run auto-start after server is up
    autoStartContainers();
});
EOL
echo "[+] Created server.js backend file"

# Create package.json file for Node.js dependencies
cat > "$APP_DIR/package.json" << 'EOL'
{
  "name": "manager-cli-web-interface",
  "version": "1.0.0",
  "description": "Web interface for Manager CLI operations",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "body-parser": "^1.20.2"
  }
}
EOL
echo "[+] Created package.json file"

# Check if Node.js is installed
if ! command -v node >/dev/null 2>&1; then
    echo "[!] Node.js is required but not installed."
    echo "    Please install Node.js from https://nodejs.org/"
    exit 1
fi

# Install dependencies
echo "[+] Installing dependencies..."
cd "$APP_DIR" && npm install
if [ $? -ne 0 ]; then
    echo "[!] Error installing dependencies. Please check npm error messages."
    exit 1
fi

# Start the application
echo "==============================================="
echo "[+] Starting Manager CLI Web Interface"
echo "[+] Press Ctrl+C to stop the server"
echo "==============================================="
cd "$APP_DIR" && node server.js

exit 0
