#!/bin/bash

# Enhanced Script to launch the Manager CLI Web Interface
# Author: Jackson Makl
# Date: March 19, 2025
# Updated: March 26, 2025

echo "==============================================="
echo "  Launching Enhanced Manager CLI Web Interface"
echo "==============================================="

# Define path to the web application
APP_DIR="$(pwd)/manager-web-app"

# Create the application directory if it doesn't exist
if [ ! -d "$APP_DIR" ]; then
    mkdir -p "$APP_DIR"
    echo "[+] Created application directory: $APP_DIR"
fi

# Save the HTML file to the application directory
cat > "$APP_DIR/index.html" << 'EOL'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Container Manager</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #3EB5B5;
            --primary-dark: #2b9594;
            --primary-light: #EEF2FF;
            --secondary: #64748B;
            --success: #10B981;
            --info: #0EA5E9;
            --warning: #F59E0B;
            --danger: #EF4444;
            --light: #F8FAFC;
            --dark: #1E293B;
            --surface: #FFFFFF;
            --bg: #F1F5F9;
            --border: #E2E8F0;
            --text: #0F172A;
            --text-secondary: #64748B;
            --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --transition: all 0.2s ease-in-out;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            background-color: var(--bg);
            color: var(--text);
            line-height: 1.6;
        }

        .container {
            max-width: 1100px;
            margin: 40px auto;
            padding: 0 24px;
        }

        .app-header {
            display: flex;
            align-items: center;
            margin-bottom: 32px;
        }

        .app-header h1 {
            font-weight: 700;
            font-size: 28px;
            color: var(--text);
            margin-left: 16px;
            letter-spacing: -0.5px;
        }

        .app-header .logo {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            width: 52px;
            height: 52px;
            border-radius: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            box-shadow: 0 3px 10px rgba(246, 222, 0, 0.3);
        }

        .app-header .version {
            margin-left: auto;
            background-color: var(--primary-light);
            color: var(--primary-dark);
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
        }

        .card {
            background-color: var(--surface);
            border-radius: 16px;
            box-shadow: var(--shadow);
            padding: 24px;
            margin-bottom: 28px;
            transition: var(--transition);
            border: 1px solid var(--border);
        }

        .card:hover {
            box-shadow: var(--shadow-lg);
            transform: translateY(-2px);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 16px;
            margin-bottom: 20px;
            border-bottom: 1px solid var(--border);
        }

        .card-header h2 {
            font-weight: 600;
            font-size: 20px;
            color: var(--text);
            display: flex;
            align-items: center;
        }

        .card-header h2 i {
            margin-right: 12px;
            color: var(--primary);
            font-size: 18px;
        }

        .form-group {
            margin-bottom: 24px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            font-size: 15px;
            color: var(--text);
        }

        .input-wrapper {
            position: relative;
        }

        .input-wrapper i {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-secondary);
        }

        input[type="text"],
        input[type="password"],
        select {
            width: 100%;
            padding: 12px 16px 12px 46px;
            border: 1px solid var(--border);
            border-radius: 12px;
            font-size: 15px;
            transition: var(--transition);
            background-color: var(--surface);
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
        }

        input[type="text"]:focus,
        input[type="password"]:focus,
        select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.15);
        }

        .input-help {
            margin-top: 6px;
            font-size: 13px;
            color: var(--text-secondary);
        }

        .checkbox-container {
            display: flex;
            align-items: center;
            margin-top: 12px;
        }

        .checkbox-container input[type="checkbox"] {
            margin-right: 10px;
            width: 18px;
            height: 18px;
            accent-color: var(--primary);
            cursor: pointer;
        }

        .checkbox-container label {
            margin-bottom: 0;
            font-size: 14px;
            color: var(--text);
            cursor: pointer;
        }

        .command-section {
            margin-top: 28px;
        }

        .section-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 16px;
            color: var(--text);
            display: flex;
            align-items: center;
        }

        .section-title i {
            margin-right: 10px;
            color: var(--primary);
        }

        .actions {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
            gap: 16px;
            margin-bottom: 24px;
        }

        button {
            padding: 12px 16px;
            border: none;
            border-radius: 12px;
            background-color: var(--primary);
            color: white;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            height: 45px;
        }

        button:hover {
            filter: brightness(1.1);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        button:active {
            transform: translateY(0);
            filter: brightness(0.95);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        button i {
            margin-right: 8px;
        }

        /* Button colors */
        .btn-initialize { 
            background-color: var(--secondary); 
            background: linear-gradient(135deg, var(--secondary), #4B5563);
        }
        .btn-push { 
            background-color: var(--primary); 
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        }
        .btn-pull { 
            background-color: var(--info); 
            background: linear-gradient(135deg, var(--info), #0284C7);
        }
        .btn-stop { 
            background-color: var(--danger); 
            background: linear-gradient(135deg, var(--danger), #DC2626);
        }
        .btn-start { 
            background-color: var(--success); 
            background: linear-gradient(135deg, var(--success), #059669);
        }
        .btn-restart { 
            background-color: var(--warning); 
            background: linear-gradient(135deg, var(--warning), #D97706);
        }
        .btn-add { 
            background-color: var(--primary-dark); 
            background: linear-gradient(135deg, #6366F1, var(--primary-dark));
        }
        .btn-list { 
            background-color: var(--secondary); 
            background: linear-gradient(135deg, #64748B, #475569);
        }

        .output-container {
            margin-top: 24px;
        }

        .card-header .actions-menu {
            display: flex;
            gap: 12px;
        }

        .card-header .actions-menu button {
            background-color: transparent;
            color: var(--text-secondary);
            box-shadow: none;
            padding: 6px;
            height: auto;
            border-radius: 8px;
        }

        .card-header .actions-menu button:hover {
            background-color: var(--bg);
            color: var(--primary);
            transform: none;
            box-shadow: none;
        }

        .terminal-header {
            background-color: #1A1A1A;
            color: #E0E0E0;
            padding: 10px 16px;
            border-radius: 12px 12px 0 0;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            font-size: 14px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .terminal-header .dots {
            display: flex;
            gap: 6px;
        }

        .terminal-header .dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .terminal-header .dot-red { background-color: #FF5F56; }
        .terminal-header .dot-yellow { background-color: #FFBD2E; }
        .terminal-header .dot-green { background-color: #27C93F; }

        .terminal {
            background-color: #1E1E1E;
            color: #F8F8F8;
            padding: 16px;
            border-radius: 0 0 12px 12px;
            font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
            font-size: 14px;
            line-height: 1.6;
            white-space: pre-wrap;
            overflow-y: auto;
            max-height: 400px;
            min-height: 200px;
        }

        .terminal::before {
            content: "$ ";
            color: #27C93F;
        }

        .terminal a {
            color: #3B82F6;
            text-decoration: underline;
        }

        .terminal a:hover {
            color: #60A5FA;
        }

        .loading {
            display: none;
            text-align: center;
            margin: 20px 0;
        }

        .spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 4px solid rgba(79, 70, 229, 0.2);
            border-radius: 50%;
            border-top-color: var(--primary);
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .status-bar {
            margin-top: 36px;
            color: var(--text-secondary);
            font-size: 14px;
            display: flex;
            justify-content: space-between;
            padding-top: 20px;
            border-top: 1px solid var(--border);
        }

        .badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 10px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            margin-left: 12px;
        }

        .badge-primary {
            background-color: var(--primary-light);
            color: var(--primary-dark);
        }

        .tooltip {
            position: relative;
            display: inline-block;
            cursor: help;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 200px;
            background-color: var(--dark);
            color: white;
            text-align: center;
            border-radius: 8px;
            padding: 8px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            transform: translateX(-50%);
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 12px;
            box-shadow: var(--shadow);
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

        /* Container List Styling */
        .container-list {
            margin-top: 20px;
            border-radius: 12px;
            overflow: hidden;
            border: 1px solid var(--border);
        }

        .container-list table {
            width: 100%;
            border-collapse: collapse;
        }

        .container-list th {
            background-color: var(--bg);
            color: var(--text);
            font-weight: 600;
            text-align: left;
            padding: 12px 16px;
            font-size: 14px;
        }

        .container-list td {
            padding: 12px 16px;
            border-top: 1px solid var(--border);
            font-size: 14px;
        }

        .container-list tr:hover {
            background-color: var(--primary-light);
        }

        .container-list .status-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
        }

        .status-running {
            background-color: rgba(16, 185, 129, 0.1);
            color: var(--success);
        }

        .status-stopped {
            background-color: rgba(239, 68, 68, 0.1);
            color: var(--danger);
        }

        /* Log Viewer */
        .log-selector {
            display: flex;
            gap: 12px;
            margin-bottom: 12px;
            align-items: center;
        }

        .log-selector select {
            flex: 1;
            padding-left: 16px;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: var(--surface);
            margin: 10% auto;
            padding: 24px;
            border-radius: 16px;
            box-shadow: var(--shadow-xl);
            width: 90%;
            max-width: 600px;
            animation: modalFadeIn 0.3s;
        }

        @keyframes modalFadeIn {
            from {opacity: 0; transform: translateY(-50px);}
            to {opacity: 1; transform: translateY(0);}
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 16px;
            border-bottom: 1px solid var(--border);
        }

        .modal-header h3 {
            font-weight: 600;
            font-size: 20px;
            color: var(--text);
        }

        .modal-close {
            cursor: pointer;
            font-size: 24px;
            color: var(--text-secondary);
        }

        .modal-close:hover {
            color: var(--primary);
        }

        .modal-body {
            max-height: 60vh;
            overflow-y: auto;
        }

        /* Toast Notifications */
        .toast-container {
            position: fixed;
            bottom: 24px;
            right: 24px;
            z-index: 1000;
        }

        .toast {
            display: flex;
            align-items: center;
            background-color: var(--surface);
            padding: 16px;
            border-radius: 12px;
            box-shadow: var(--shadow-lg);
            margin-top: 16px;
            transform: translateX(120%);
            transition: transform 0.3s ease;
            border-left: 4px solid var(--primary);
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast-icon {
            font-size: 20px;
            margin-right: 12px;
        }

        .toast-success {
            border-left-color: var(--success);
        }

        .toast-error {
            border-left-color: var(--danger);
        }

        .toast-warning {
            border-left-color: var(--warning);
        }

        .toast-success .toast-icon {
            color: var(--success);
        }

        .toast-error .toast-icon {
            color: var(--danger);
        }

        .toast-warning .toast-icon {
            color: var(--warning);
        }

        /* Tabs for Output Container */
        .tabs {
            display: flex;
            border-bottom: 1px solid var(--border);
            margin-bottom: 20px;
        }

        .tab {
            padding: 12px 20px;
            font-weight: 500;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: var(--transition);
        }

        .tab.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        @media (max-width: 768px) {
            .container {
                padding: 0 16px;
                margin: 24px auto;
            }
            
            .actions {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .card {
                padding: 20px;
            }
            
            .app-header .version {
                display: none;
            }
            
            .log-selector {
                flex-direction: column;
                align-items: stretch;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="app-header">
            <div class="logo">
                <i class="fas fa-cubes"></i>
            </div>
            <h1>Container Manager</h1>
            <span class="version">v2.2.0</span>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h2><i class="fas fa-cog"></i>Configuration</h2>
                <div class="actions-menu">
                    <button title="Import settings" aria-label="Import settings">
                        <i class="fas fa-file-import"></i>
                    </button>
                    <button title="Export settings" aria-label="Export settings">
                        <i class="fas fa-file-export"></i>
                    </button>
                </div>
            </div>
            
            <div class="form-group">
                <label for="github-key">GitHub Personal Access Token</label>
                <div class="input-wrapper">
                    <i class="fas fa-key"></i>
                    <input type="password" id="github-key" placeholder="Enter your GitHub Personal Access Token">
                </div>
                <div class="input-help">Your GitHub token will be used for repository operations.</div>
                <div class="checkbox-container">
                    <input type="checkbox" id="remember-key" checked>
                    <label for="remember-key">Remember token</label>
                </div>
            </div>

            <div class="form-group">
                <label for="repo-name">Repository Name</label>
                <div class="input-wrapper">
                    <i class="fas fa-code-branch"></i>
                    <input type="text" id="repo-name" placeholder="Enter repository name">
                </div>
                <div class="input-help">The repository name without the organization prefix.</div>
                <div class="checkbox-container">
                    <input type="checkbox" id="remember-repo" checked>
                    <label for="remember-repo">Remember repository</label>
                </div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h2><i class="fas fa-terminal"></i>Operations</h2>
            </div>
            
            <div class="command-section">
                <div class="section-title">
                    <i class="fab fa-git-alt"></i> Git Operations
                </div>
                <div class="actions" id="git-actions">
                    <button class="btn-initialize tooltip" onclick="executeCommand('create-repo')">
                        <i class="fas fa-code-branch"></i> Initialize
                        <span class="tooltiptext">Initialize a new Git repository</span>
                    </button>
                    <button class="btn-push tooltip" onclick="executeCommand('push-repo')">
                        <i class="fas fa-upload"></i> Push
                        <span class="tooltiptext">Push changes to the remote repository</span>
                    </button>
                    <button class="btn-pull tooltip" onclick="executeCommand('pull-repo')">
                        <i class="fas fa-download"></i> Pull
                        <span class="tooltiptext">Pull latest changes from the remote repository</span>
                    </button>
                </div>
            </div>
            
            <div class="command-section">
                <div class="section-title">
                    <i class="fas fa-server"></i> Container Operations
                </div>
                <div class="actions" id="container-actions">
                    <button class="btn-stop tooltip" onclick="executeCommand('stop-containers')">
                        <i class="fas fa-stop-circle"></i> Stop
                        <span class="tooltiptext">Stop all running containers</span>
                    </button>
                    <button class="btn-start tooltip" onclick="executeCommand('start-containers')">
                        <i class="fas fa-play-circle"></i> Start
                        <span class="tooltiptext">Start all containers</span>
                    </button>
                    <button class="btn-add tooltip" onclick="showAddContainerModal()">
                        <i class="fas fa-plus-circle"></i> Add
                        <span class="tooltiptext">Add a new container</span>
                    </button>
                    <button class="btn-list tooltip" onclick="refreshContainerList()">
                        <i class="fas fa-list"></i> List
                        <span class="tooltiptext">List Containers</span>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Active Containers Display -->
        <div class="card" id="active-containers-card" style="display: none;">
            <div class="card-header">
                <h2><i class="fas fa-signal"></i>Active Containers</h2>
                <div class="actions-menu">
                    <button title="Refresh container list" aria-label="Refresh container list" onclick="refreshContainerList()">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
            </div>
            <div id="container-list-container">
                <p>No containers found. Click "List" to refresh.</p>
            </div>
        </div>
        
        <!-- Output Container with Tabs -->
        <div class="card output-container">
            <div class="card-header">
                <h2><i class="fas fa-desktop"></i>Dashboard</h2>
                <div class="actions-menu">
                    <button title="Clear output" aria-label="Clear output" onclick="clearOutput()">
                        <i class="fas fa-eraser"></i>
                    </button>
                    <button title="Copy to clipboard" aria-label="Copy to clipboard" onclick="copyOutput()">
                        <i class="fas fa-copy"></i>
                    </button>
                </div>
            </div>
            
            <div class="tabs">
                <div class="tab active" data-tab="terminal">Terminal Output</div>
                <div class="tab" data-tab="logs">Log Viewer</div>
            </div>
            
            <div class="tab-content active" data-tab-content="terminal">
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <p>Executing command, please wait...</p>
                </div>
                
                <div class="terminal-header">
                    <span>terminal@container-manager</span>
                    <div class="dots">
                        <div class="dot dot-red"></div>
                        <div class="dot dot-yellow"></div>
                        <div class="dot dot-green"></div>
                    </div>
                </div>
                <div class="terminal" id="output">No command executed yet.</div>
            </div>
            
            <div class="tab-content" data-tab-content="logs">
                <div class="log-selector">
                    <div class="input-wrapper">
                        <i class="fas fa-file-alt"></i>
                        <select id="log-file-selector">
                            <option value="">Select a log file...</option>
                        </select>
                    </div>
                    <button onclick="loadSelectedLog()">
                        <i class="fas fa-eye"></i> View Log
                    </button>
                    <button onclick="refreshLogList()">
                        <i class="fas fa-sync-alt"></i> Refresh
                    </button>
                </div>
                <div class="terminal-header">
                    <span id="log-filename">No log file selected</span>
                    <div class="dots">
                        <div class="dot dot-red"></div>
                        <div class="dot dot-yellow"></div>
                        <div class="dot dot-green"></div>
                    </div>
                </div>
                <div class="terminal" id="log-content">Select a log file to view its contents.</div>
            </div>
        </div>
        
        <div class="status-bar">
            <div>Manager CLI Web Interface <span class="badge badge-primary">v2.2.0</span></div>
            <div>© 2025 Jackson Makl</div>
        </div>
    </div>
    
    <!-- Confirmation Modal -->
    <div id="confirm-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Confirm Action</h3>
                <span class="modal-close" onclick="closeModal('confirm-modal')">&times;</span>
            </div>
            <div class="modal-body">
                <p id="confirm-message">Are you sure you want to proceed?</p>
            </div>
            <div style="display: flex; justify-content: flex-end; gap: 12px; margin-top: 20px;">
                <button onclick="closeModal('confirm-modal')" style="background-color: var(--secondary);">Cancel</button>
                <button id="confirm-action" style="background-color: var(--primary);">Confirm</button>
            </div>
        </div>
    </div>
    
    <!-- Add Container Modal -->
    <div id="add-container-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Add New Container</h3>
                <span class="modal-close" onclick="closeModal('add-container-modal')">&times;</span>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="container-name">Container Display Name</label>
                    <div class="input-wrapper">
                        <i class="fas fa-tag"></i>
                        <input type="text" id="container-name" placeholder="Enter a name for this container">
                    </div>
                    <div class="input-help">This name will be used for display in the UI. Backend will still use framework-app naming.</div>
                </div>
            </div>
            <div style="display: flex; justify-content: flex-end; gap: 12px; margin-top: 20px;">
                <button onclick="closeModal('add-container-modal')" style="background-color: var(--secondary);">Cancel</button>
                <button onclick="addContainerWithName()" style="background-color: var(--primary);">Add Container</button>
            </div>
        </div>
    </div>
    
    <!-- Toast Container -->
    <div class="toast-container" id="toast-container"></div>

    <script>
    document.addEventListener('DOMContentLoaded', async function() {
        // Load from localStorage
        const savedGithubKey = localStorage.getItem('githubKey');
        const savedRepoName = localStorage.getItem('repoName');
    
        if (savedGithubKey) {
            document.getElementById('github-key').value = savedGithubKey;
        }
    
        if (savedRepoName) {
            document.getElementById('repo-name').value = savedRepoName;
        }
    
        // Also attempt to load from the file
        try {
            const response = await fetch('/load-config');
            if (response.ok) {
                const config = await response.json();
                if (config.githubKey) {
                    document.getElementById('github-key').value = config.githubKey;
                    localStorage.setItem('githubKey', config.githubKey);
                }
                if (config.repoName) {
                    document.getElementById('repo-name').value = config.repoName;
                    localStorage.setItem('repoName', config.repoName);
                }
            }
        } catch (error) {
            console.error('Error loading config from file:', error);
        }
    
        // Listen for input changes and save both locally and to file
        const saveToStorageAndFile = () => {
            const githubKey = document.getElementById('github-key').value;
            const repoName = document.getElementById('repo-name').value;
    
            localStorage.setItem('githubKey', githubKey);
            localStorage.setItem('repoName', repoName);
    
            fetch('/save-config', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ githubKey, repoName })
            }).catch(err => console.error('Error saving config:', err));
        };
    
        document.getElementById('github-key').addEventListener('input', saveToStorageAndFile);
        document.getElementById('repo-name').addEventListener('input', saveToStorageAndFile);
        
        // Initialize tabs
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', () => {
                // Remove active class from all tabs and content
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                
                // Add active class to clicked tab and corresponding content
                tab.classList.add('active');
                const tabName = tab.getAttribute('data-tab');
                document.querySelector(`.tab-content[data-tab-content="${tabName}"]`).classList.add('active');
                
                // If Log Viewer tab is activated, refresh log list
                if (tabName === 'logs') {
                    refreshLogList();
                }
            });
        });
        
        // Initial container list load if credentials exist
        if (savedGithubKey && savedRepoName) {
            setTimeout(() => refreshContainerList(), 1000);
        }
    });

    // Function to show a confirmable action
    function confirmAction(message, actionCallback) {
        const modal = document.getElementById('confirm-modal');
        const confirmMessage = document.getElementById('confirm-message');
        const confirmButton = document.getElementById('confirm-action');
        
        confirmMessage.textContent = message;
        modal.style.display = 'block';
        
        // Remove previous event listener
        const newConfirmButton = confirmButton.cloneNode(true);
        confirmButton.parentNode.replaceChild(newConfirmButton, confirmButton);
        
        // Add new event listener
        newConfirmButton.addEventListener('click', () => {
            closeModal('confirm-modal');
            actionCallback();
        });
    }
    
    // Function to close a modal
    function closeModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
    }
    
    // Function to show a toast notification
    function showToast(message, type = 'success') {
        const toastContainer = document.getElementById('toast-container');
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        
        let icon = 'check-circle';
        if (type === 'error') icon = 'exclamation-circle';
        if (type === 'warning') icon = 'exclamation-triangle';
        
        toast.innerHTML = `
            <div class="toast-icon"><i class="fas fa-${icon}"></i></div>
            <div class="toast-content">${message}</div>
        `;
        
        toastContainer.appendChild(toast);
        
        // Trigger reflow for animation
        void toast.offsetWidth;
        toast.classList.add('show');
        
        // Remove toast after 5 seconds
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 5000);
    }
        
    // Show the Add Container modal
    function showAddContainerModal() {
        document.getElementById('container-name').value = '';
        document.getElementById('add-container-modal').style.display = 'block';
    }
    
    // Add a container with custom name
    function addContainerWithName() {
        const containerName = document.getElementById('container-name').value.trim();
        if (!containerName) {
            showToast("Please enter a container name", "warning");
            return;
        }
        
        closeModal('add-container-modal');
        executeCommand('add-container', containerName);
    }
    
    // Function to execute a command
    function executeCommand(command, containerName = null) {
        const githubKey = document.getElementById('github-key').value;
        const repoName = document.getElementById('repo-name').value;
        const outputElement = document.getElementById('output');
        const loadingElement = document.getElementById('loading');
        const rememberKey = document.getElementById('remember-key').checked;
        const rememberRepo = document.getElementById('remember-repo').checked;
        
        // Validate inputs
        if (!githubKey || !repoName) {
            outputElement.innerHTML = "Error: GitHub Personal Access Token and Repository Name are required!";
            showToast("GitHub Token and Repository Name are required", "error");
            return;
        }
        
        // Handle potentially destructive actions with confirmation
        if (command === 'stop-containers') {
            confirmAction("Are you sure you want to stop all containers?", () => {
                executeCommandAfterValidation(command, githubKey, repoName, rememberKey, rememberRepo, containerName);
            });
            return;
        }
        
        executeCommandAfterValidation(command, githubKey, repoName, rememberKey, rememberRepo, containerName);
    }
    
    function executeCommandAfterValidation(command, githubKey, repoName, rememberKey, rememberRepo, containerName = null) {
        const outputElement = document.getElementById('output');
        const loadingElement = document.getElementById('loading');
        
        // Save to localStorage if checkbox is checked
        if (rememberKey) {
            localStorage.setItem('githubKey', githubKey);
        } else {
            localStorage.removeItem('githubKey');
        }
        
        if (rememberRepo) {
            localStorage.setItem('repoName', repoName);
        } else {
            localStorage.removeItem('repoName');
        }
        
        // Show loading indicator
        loadingElement.style.display = 'block';
        outputElement.textContent = `Executing ${command}...`;
        
        // Switch to terminal tab if not already active
        activateTab('terminal');
        
        // Prepare request body
        const requestBody = {
            command: command,
            githubKey: githubKey,
            repoName: repoName
        };
        
        // Add container name if provided
        if (containerName) {
            requestBody.containerName = containerName;
        }
        
        // Make a fetch request to the backend to execute the command
        fetch('/api/execute', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody)
        })
        .then(response => response.json())
        .then(data => {
            loadingElement.style.display = 'none';
            
            // Process output to make URLs clickable
            if (data.output) {
                const processedOutput = processOutput(data.output);
                outputElement.innerHTML = processedOutput;
                
                showToast(`${capitalizeFirstLetter(command)} completed successfully`, "success");
                
                // If this was a container list command, update the container list
                if (command === 'containers-list') {
                    updateContainerList(data.output);
                }
                
                // If this was a log command, also update the log selector
                if (command === 'get-logs') {
                    refreshLogList();
                }
            } else {
                outputElement.textContent = "Command executed but no output was returned.";
            }
        })
        .catch(error => {
            loadingElement.style.display = 'none';
            outputElement.textContent = `Error executing command: ${error.message}`;
            showToast(`Error executing ${command}`, "error");
        });
    }
    
    // Function to refresh container list
    function refreshContainerList() {
        executeCommand('containers-list');
    }
    
    // Parse container output to extract information - FIXED VERSION
    function parseContainerOutput(output) {
        const lines = output.trim().split('\n');
        const containers = [];
        
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();
            if (!line) continue;
            
            // Parse each line of container output
            const urlMatch = line.match(/(https?:\/\/[^\s]+)/);
            const statusMatch = line.match(/- (Active|Inactive) -/);
            const containerMatch = line.match(/Container: ([^\s(]+)/);
            
            if (containerMatch) {
                const container = {
                    id: containerMatch[1],  // This is the key that should match what's in container-names.json
                    name: containerMatch[1], // Default name is the same as ID
                    status: statusMatch ? statusMatch[1] : 'Unknown',
                    url: urlMatch ? urlMatch[1] : 'N/A'
                };
                containers.push(container);
            }
        }
        
        return containers;
    }
    
    // Function to update container list display - FIXED VERSION
    function updateContainerList(output) {
        const containersCard = document.getElementById('active-containers-card');
        const containerListContainer = document.getElementById('container-list-container');
        
        // Extract container information from output
        const containers = parseContainerOutput(output);
        
        if (containers.length > 0) {
            containersCard.style.display = 'block';
            
            // Fetch custom container names if available
            fetch('/api/container-names', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    repoName: document.getElementById('repo-name').value
                })
            })
            .then(response => response.json())
            .then(data => {
                const nameMappings = data.mappings || {};
                
                // Create table for containers
                let tableHTML = `
                    <div class="container-list">
                        <table>
                            <thead>
                                <tr>
                                    <th>Container ID</th>
                                    <th>Display Name</th>
                                    <th>Status</th>
                                    <th>URL</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                `;
                
                containers.forEach(container => {
                    const statusClass = container.status.includes('Active') ? 'status-running' : 'status-stopped';
                    const statusText = container.status.includes('Active') ? 'Running' : 'Stopped';
                    
                    // Use custom name if available, otherwise use container ID
                    const displayName = nameMappings[container.id] || container.id;
                    
                    tableHTML += `
                        <tr>
                            <td>${container.id}</td>
                            <td>${displayName}</td>
                            <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                            <td>${container.url ? `<a href="${container.url}" target="_blank">${container.url} <i class="fas fa-external-link-alt"></i></a>` : 'N/A'}</td>
                            <td>
                                <button class="btn-${statusText === 'Running' ? 'stop' : 'start'}" 
                                        style="height: 32px; padding: 4px 8px;" 
                                        onclick="executeCommand('${statusText === 'Running' ? 'stop' : 'start'}-containers')">
                                    <i class="fas fa-${statusText === 'Running' ? 'stop' : 'play'}-circle"></i>
                                    ${statusText === 'Running' ? 'Stop' : 'Start'}
                                </button>
                            </td>
                        </tr>
                    `;
                });
                
                tableHTML += `
                            </tbody>
                        </table>
                    </div>
                `;
                
                containerListContainer.innerHTML = tableHTML;
            })
            .catch(error => {
                console.error('Error fetching container names:', error);
                // Fallback display if name fetching fails
                displayContainersWithoutCustomNames(containers, containerListContainer);
            });
        } else {
            containerListContainer.innerHTML = "<p>No containers found.</p>";
            containersCard.style.display = 'none';
        }
    }
    
    // Helper function for fallback display when fetching names fails
    function displayContainersWithoutCustomNames(containers, containerListContainer) {
        let tableHTML = `
            <div class="container-list">
                <table>
                    <thead>
                        <tr>
                            <th>Container ID</th>
                            <th>Name</th>
                            <th>Status</th>
                            <th>URL</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
        `;
        
        containers.forEach(container => {
            const statusClass = container.status.includes('Active') ? 'status-running' : 'status-stopped';
            const statusText = container.status.includes('Active') ? 'Running' : 'Stopped';
            
            tableHTML += `
                <tr>
                    <td>${container.id}</td>
                    <td>${container.name}</td>
                    <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                    <td>${container.url ? `<a href="${container.url}" target="_blank">${container.url} <i class="fas fa-external-link-alt"></i></a>` : 'N/A'}</td>
                    <td>
                        <button class="btn-${statusText === 'Running' ? 'stop' : 'start'}" 
                                style="height: 32px; padding: 4px 8px;" 
                                onclick="executeCommand('${statusText === 'Running' ? 'stop' : 'start'}-containers')">
                            <i class="fas fa-${statusText === 'Running' ? 'stop' : 'play'}-circle"></i>
                            ${statusText === 'Running' ? 'Stop' : 'Start'}
                        </button>
                    </td>
                </tr>
            `;
        });
        
        tableHTML += `
                    </tbody>
                </table>
            </div>
        `;
        
        containerListContainer.innerHTML = tableHTML;
    }
    
    // Process output to make URLs clickable
    function processOutput(output) {
        // Regex to find URLs
        const urlRegex = /(https?:\/\/[^\s]+)/g;
        
        // Replace URLs with clickable links
        return output.replace(urlRegex, '<a href="$1" target="_blank">$1</a>');
    }
    
    // Function to refresh log file list
    function refreshLogList() {
        const githubKey = document.getElementById('github-key').value;
        const repoName = document.getElementById('repo-name').value;
        
        if (!githubKey || !repoName) {
            showToast("GitHub Token and Repository Name are required", "warning");
            return;
        }
        
        fetch('/api/logs-list', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                githubKey: githubKey,
                repoName: repoName
            })
        })
        .then(response => response.json())
        .then(data => {
            const selector = document.getElementById('log-file-selector');
            selector.innerHTML = '<option value="">Select a log file...</option>';
            
            if (data.logs && data.logs.length > 0) {
                data.logs.forEach(log => {
                    const option = document.createElement('option');
                    option.value = log;
                    option.textContent = log;
                    selector.appendChild(option);
                });
            } else {
                const option = document.createElement('option');
                option.value = "";
                option.textContent = "No log files found";
                option.disabled = true;
                selector.appendChild(option);
            }
        })
        .catch(error => {
            console.error('Error fetching log files:', error);
            showToast("Error fetching log files", "error");
        });
    }
    
    // Function to load the selected log file
    function loadSelectedLog() {
        const githubKey = document.getElementById('github-key').value;
        const repoName = document.getElementById('repo-name').value;
        const logFile = document.getElementById('log-file-selector').value;
        
        if (!logFile) {
            showToast("Please select a log file", "warning");
            return;
        }
        
        fetch('/api/view-log', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                githubKey: githubKey,
                repoName: repoName,
                logFile: logFile
            })
        })
        .then(response => response.json())
        .then(data => {
            document.getElementById('log-filename').textContent = logFile;
            document.getElementById('log-content').innerHTML = processOutput(data.content);
        })
        .catch(error => {
            console.error('Error loading log file:', error);
            showToast("Error loading log file", "error");
        });
    }
    
    // Function to activate a specific tab
    function activateTab(tabName) {
        document.querySelectorAll('.tab').forEach(tab => {
            if (tab.getAttribute('data-tab') === tabName) {
                tab.click();
            }
        });
    }
    
    // Utility function to clear output
    function clearOutput() {
        const activeTab = document.querySelector('.tab.active').getAttribute('data-tab');
        if (activeTab === 'terminal') {
            document.getElementById('output').textContent = 'Output cleared.';
        } else if (activeTab === 'logs') {
            document.getElementById('log-content').textContent = 'Log view cleared.';
        }
    }
    
    // Utility function to copy output
    function copyOutput() {
        const activeTab = document.querySelector('.tab.active').getAttribute('data-tab');
        const elementId = activeTab === 'terminal' ? 'output' : 'log-content';
        const output = document.getElementById(elementId).textContent;
        
        navigator.clipboard.writeText(output)
            .then(() => {
                const originalText = document.getElementById(elementId).textContent;
                document.getElementById(elementId).textContent = 'Content copied to clipboard!';
                setTimeout(() => {
                    document.getElementById(elementId).textContent = originalText;
                }, 1500);
                showToast("Copied to clipboard", "success");
            })
            .catch(err => {
                console.error('Failed to copy: ', err);
                showToast("Failed to copy to clipboard", "error");
            });
    }
    
    // Capitalize first letter of a string
    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.replace(/-/g, ' ').slice(1);
    }
    </script>
</body>
</html>
EOL
echo "[+] Saved enhanced web application HTML file"

# Create the server.js file for the backend
cat > "$APP_DIR/server.js" << 'EOL'
const fs = require('fs');
const path = require('path');
const express = require('express');
const { exec } = require('child_process');
const bodyParser = require('body-parser');
const app = express();
const port = 1100;

// Middleware for parsing JSON
app.use(bodyParser.json());

// Serve static files
app.use(express.static(path.join(__dirname)));

// Helper function to execute commands
const executeCommand = (command, githubKey, repoName, req = {}) => {
    let cmdToExecute = '';
    
    switch(command) {
        case 'create-repo':
            cmdToExecute = `bash ../bin/initialize ${githubKey} ${repoName}`;
            break;
        case 'push-repo':
            cmdToExecute = `cd ~/manager/manager-web-app && bash ~/manager/bin/push ${githubKey} ${repoName} `;
            break;
        case 'pull-repo':
            cmdToExecute = `cd ~/manager/manager-web-app && bash ~/manager/bin/pull ${githubKey} ${repoName} `;
            break;
        case 'stop-containers':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && bash ~/manager/bin/stop ${githubKey} ${repoName} `;
            break;
        case 'start-containers':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && bash ~/manager/bin/start ${githubKey} ${repoName} `;
            break;
        case 'deploy':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && bash bin/deploy`;
            break;
        case 'get-logs':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName}/logs && cat *.log`;
            break;
        case 'add-container':
            const containerName = req.body.containerName || '';
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && bash ~/manager/bin/add ${repoName} "${containerName}"`;
            break;
        case 'containers-list':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && sudo bash ~/manager/bin/containers-list `;
            break;
        default:
            return { error: 'Invalid command' };
    }
    
    return new Promise((resolve, reject) => {
        exec(cmdToExecute, (error, stdout, stderr) => {
            if (error) {
                reject(`Error executing command: ${error.message}\n${stderr}`);
            } else {
                resolve(stdout);
            }
        });
    });
};

// Save configuration to file
app.post('/save-config', (req, res) => {
    fs.writeFileSync('config.json', JSON.stringify(req.body, null, 2));
    res.sendStatus(200);
});

// Load configuration from file
app.get('/load-config', (req, res) => {
    if (fs.existsSync('config.json')) {
        const config = JSON.parse(fs.readFileSync('config.json'));
        res.json(config);
    } else {
        res.json({});
    }
});

// API endpoint to execute commands
app.post('/api/execute', async (req, res) => {
    const { command, githubKey, repoName, containerName } = req.body;
    
    try {
        // Include containerName in the request parameters
        req.body.containerName = containerName;
        const output = await executeCommand(command, githubKey, repoName, req);
        
        // Store the container name mapping if this is an add-container command
        if (command === 'add-container' && containerName) {
            try {
                const mappingsPath = path.join(process.env.HOME, 'manager', 'manager-web-app', repoName, 'container-names.json');
                let mappings = {};
                
                // Load existing mappings if available
                if (fs.existsSync(mappingsPath)) {
                    mappings = JSON.parse(fs.readFileSync(mappingsPath, 'utf8'));
                }
                
                // Extract container name from output if possible
                const match = output.match(/Container: ([^\s(]+)/);
                if (match && match[1]) {
                    // Store mapping by container name (e.g., framework-app), not ID
                    const containerSystemName = match[1];
                    mappings[containerSystemName] = containerName;
                    fs.writeFileSync(mappingsPath, JSON.stringify(mappings, null, 2));
                    console.log(`Saved container name mapping: ${containerSystemName} -> ${containerName}`);
                }
            } catch (err) {
                console.error('Error saving container name mapping:', err);
            }
        }
        
        res.json({ output });
    } catch (error) {
        res.status(500).json({ output: error });
    }
});

// API endpoint to get custom container names
app.post('/api/container-names', (req, res) => {
    const { repoName } = req.body;
    const mappingsPath = path.join(process.env.HOME, 'manager', 'manager-web-app', repoName, 'container-names.json');
    
    try {
        if (fs.existsSync(mappingsPath)) {
            const mappings = JSON.parse(fs.readFileSync(mappingsPath, 'utf8'));
            res.json({ mappings });
        } else {
            res.json({ mappings: {} });
        }
    } catch (error) {
        console.error('Error reading container name mappings:', error);
        res.status(500).json({ error: 'Error reading container name mappings' });
    }
});

// API endpoint to list log files
app.post('/api/logs-list', (req, res) => {
    const { repoName } = req.body;
    const logDir = path.join(process.env.HOME, 'manager', 'manager-web-app', repoName, 'logs');
    
    try {
        if (fs.existsSync(logDir)) {
            const files = fs.readdirSync(logDir)
                .filter(file => file.endsWith('.log'))
                .sort((a, b) => {
                    // Sort by modification time (newest first)
                    return fs.statSync(path.join(logDir, b)).mtime.getTime() - 
                           fs.statSync(path.join(logDir, a)).mtime.getTime();
                });
            res.json({ logs: files });
        } else {
            res.json({ logs: [] });
        }
    } catch (error) {
        console.error('Error listing log files:', error);
        res.status(500).json({ error: 'Error listing log files' });
    }
});

// API endpoint to view a specific log file
app.post('/api/view-log', (req, res) => {
    const { repoName, logFile } = req.body;
    const logPath = path.join(process.env.HOME, 'manager', 'manager-web-app', repoName, 'logs', logFile);
    
    try {
        if (fs.existsSync(logPath)) {
            const content = fs.readFileSync(logPath, 'utf8');
            res.json({ content });
        } else {
            res.status(404).json({ error: 'Log file not found' });
        }
    } catch (error) {
        console.error('Error reading log file:', error);
        res.status(500).json({ error: 'Error reading log file' });
    }
});

// Route for the main page
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Format container output into a more structured format
function formatContainerOutput(stdout, repoName) {
    const lines = stdout.trim().split('\n');
    if (lines.length <= 1) return stdout;  // No containers or just header
    
    // Try to load container name mappings
    let nameMappings = {};
    try {
        const mappingsPath = path.join(process.env.HOME, 'manager', 'manager-web-app', repoName, 'container-names.json');
        if (fs.existsSync(mappingsPath)) {
            nameMappings = JSON.parse(fs.readFileSync(mappingsPath, 'utf8'));
        }
    } catch (err) {
        console.error('Error loading container name mappings:', err);
    }
    
    let formattedOutput = "CONTAINER ID | NAME | STATUS | PORTS\n";
    formattedOutput += "-------------------------------------------\n";
    
    for (let i = 1; i < lines.length; i++) {
        const parts = lines[i].trim().split(/\s{2,}/);
        if (parts.length >= 4) {
            // Use custom name if available, otherwise use original
            const containerId = parts[0];
            const displayName = nameMappings[containerId] || parts[1];
            formattedOutput += `${containerId} | ${displayName} | ${parts[2]} | ${parts[3]}\n`;
        }
    }
    
    return formattedOutput;
}

// Auto-start containers on server start if credentials are available
const autoStartContainers = async () => {
    console.log("Checking for saved credentials to auto-start containers...");
    
    try {
        if (fs.existsSync('config.json')) {
            const config = JSON.parse(fs.readFileSync('config.json'));
            
            if (config.githubKey && config.repoName) {
                console.log(`Found credentials for repository: ${config.repoName}`);
                console.log("Auto-starting containers...");
                
                try {
                    const output = await executeCommand('start-containers', config.githubKey, config.repoName);
                    console.log("Auto-start successful:");
                    console.log(output);
                } catch (error) {
                    console.error("Error during auto-start:", error);
                }
            } else {
                console.log("No complete credentials found. Skipping auto-start.");
            }
        } else {
            console.log("No config file found. Skipping auto-start.");
        }
    } catch (error) {
        console.error("Error during auto-start check:", error);
    }
};

// Start the server
app.listen(port, () => {
    console.log(`Enhanced Manager CLI Web Interface running at http://localhost:${port}`);
    // Run auto-start after server is up
    autoStartContainers();
});
EOL
echo "[+] Created enhanced server.js backend file"

# Create package.json file for Node.js dependencies
cat > "$APP_DIR/package.json" << 'EOL'
{
  "name": "manager-cli-web-interface",
  "version": "2.2.0",
  "description": "Enhanced web interface for Manager CLI operations",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "body-parser": "^1.20.2"
  }
}
EOL
echo "[+] Created package.json file"

# Check if Node.js is installed
if ! command -v node >/dev/null 2>&1; then
    echo "[!] Node.js is required but not installed."
    echo "    Please install Node.js from https://nodejs.org/"
    exit 1
fi

# Install dependencies
echo "[+] Installing dependencies..."
cd "$APP_DIR" && npm install
if [ $? -ne 0 ]; then
    echo "[!] Error installing dependencies. Please check npm error messages."
    exit 1
fi

# Start the application
echo "==============================================="
echo "[+] Starting Enhanced Manager CLI Web Interface"
echo "[+] Press Ctrl+C to stop the server"
echo "==============================================="
cd "$APP_DIR" && node server.js

exit 0
