#!/bin/bash

# Script to launch the Manager CLI Web Interface
# Author: Jackson Makl
# Date: March 19, 2025

echo "==============================================="
echo "  Launching Manager CLI Web Interface"
echo "==============================================="

# Define path to the web application
APP_DIR="$(pwd)/manager-web-app"

# Create the application directory if it doesn't exist
if [ ! -d "$APP_DIR" ]; then
    mkdir -p "$APP_DIR"
    echo "[+] Created application directory: $APP_DIR"
fi

# Save the HTML file to the application directory
cat > "$APP_DIR/index.html" << 'EOL'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Container Manager</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .checkbox-container {
          display: flex;
          align-items: center;
          margin-top: 10px;
        }
        .checkbox-container input {
          margin-right: 10px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }
        input[type="text"], input[type="password"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        .actions {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
            margin-top: 20px;
        }
        button {
            padding: 12px;
            border: none;
            border-radius: 4px;
            background-color: #4CAF50;
            color: white;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #45a049;
        }
        #output {
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f8f8;
            border-radius: 4px;
            border-left: 4px solid #4CAF50;
            white-space: pre-wrap;
            font-family: monospace;
            min-height: 200px;
            max-height: 400px;
            overflow-y: auto;
        }
        .command-title {
            font-weight: bold;
            margin-top: 10px;
            color: #333;
        }
        .loading {
            display: none;
            text-align: center;
            margin-top: 20px;
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #4CAF50;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Container Manager</h1>
        
        <div class="form-group">
            <label for="github-key">GitHub Personal Access Token:</label>
            <input type="password" id="github-key" placeholder="Enter your GitHub Personal Access Token">
        </div>

        <div class="form-group">
            <label for="repo-name">Repository Name:</label>
            <input type="text" id="repo-name" placeholder="Enter repository name">
        </div>
        <div class="checkbox-container">
          <input type="checkbox" id="remember-key" checked>
          <label for="remember-key">Remember token</label>
        </div>
        <div class="checkbox-container">
          <input type="checkbox" id="remember-repo" checked>
          <label for="remember-repo">Remember repository</label>
        </div>
        
        <div class="actions">
            <button onclick="executeCommand('create-repo')">Create New Repo</button>
            <button onclick="executeCommand('push-repo')">Push Repo</button>
            <button onclick="executeCommand('pull-repo')">Pull Repo</button>
            <button onclick="executeCommand('stop-containers')">Stop Containers</button>
            <button onclick="executeCommand('start-containers')">Start Containers</button>
        </div>
        
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>Executing command, please wait...</p>
        </div>
        
        <div class="command-title">Command Output:</div>
        <div id="output">No command executed yet.</div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
          const savedGithubKey = localStorage.getItem('githubKey');
          if (savedGithubKey) {
            document.getElementById('github-key').value = savedGithubKey;
          }
          
          const savedRepoName = localStorage.getItem('repoName');
          if (savedRepoName) {
            document.getElementById('repo-name').value = savedRepoName;
          }
        });
        function executeCommand(command) {
            const githubKey = document.getElementById('github-key').value;
            const repoName = document.getElementById('repo-name').value;
            const outputElement = document.getElementById('output');
            const loadingElement = document.getElementById('loading');
            const rememberKey = document.getElementById('remember-key').checked;
            const rememberRepo = document.getElementById('remember-repo').checked;
            // Validate inputs
            if (!githubKey || !repoName) {
                outputElement.textContent = "Error: GitHub Personal Access Token and Repository Name are required!";
                return;
            }
            if (rememberKey) {
              localStorage.setItem('githubKey', githubKey);
            } else {
              localStorage.removeItem('githubKey');
            }
            
            if (rememberRepo) {
              localStorage.setItem('repoName', repoName);
            } else {
              localStorage.removeItem('repoName');
            }

            
            if (rememberRepo) {
              localStorage.setItem('repoName', repoName);
            } else {
              localStorage.removeItem('repoName');
            }
            // Show loading indicator
            loadingElement.style.display = 'block';
            outputElement.textContent = `Executing ${command}...`;
            
            // Make a fetch request to the backend to execute the command
            fetch('/api/execute', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    command: command,
                    githubKey: githubKey,
                    repoName: repoName
                })
            })
            .then(response => response.json())
            .then(data => {
                loadingElement.style.display = 'none';
                outputElement.textContent = data.output;
            })
            .catch(error => {
                loadingElement.style.display = 'none';
                outputElement.textContent = `Error executing command: ${error.message}`;
            });
        }
    </script>
</body>
</html>
EOL
echo "[+] Saved web application HTML file"

# Create the server.js file for the backend
cat > "$APP_DIR/server.js" << 'EOL'
const express = require('express');
const { exec } = require('child_process');
const bodyParser = require('body-parser');
const path = require('path');
const app = express();
const port = 1100;

// Middleware for parsing JSON
app.use(bodyParser.json());

// Serve static files
app.use(express.static(path.join(__dirname)));

// API endpoint to execute commands
app.post('/api/execute', (req, res) => {
    const { command, githubKey, repoName } = req.body;
    
    let cmdToExecute = '';
    
    switch(command) {
        case 'create-repo':
            cmdToExecute = `bash ../bin/initialize ${githubKey} ${repoName}`;
            break;
        case 'push-repo':
            cmdToExecute = `cd ~/manager/manager-web-app && bash ~/manager/bin/push ${githubKey} ${repoName} `;
            break;
case 'pull-repo':
    cmdToExecute = `
        set -e  # Exit immediately if a command exits with a non-zero status

        # Ensure required variables are set
        if [ -z "${repoName}" ]; then
            echo "ERROR: Repository name is not provided"
            exit 1
        fi

        if [ -z "${githubKey}" ]; then
            echo "ERROR: GitHub token is not provided"
            exit 1
        fi

        # Use full path instead of ~ to avoid expansion issues
        repoPath="$HOME/manager/manager-web-app/${repoName}"
        echo "Working with repository path: $repoPath"

        # Check if required tools are available
        command -v git >/dev/null 2>&1 || { echo "ERROR: git is required but not installed"; exit 1; }
        command -v jq >/dev/null 2>&1 || { echo "ERROR: jq is required but not installed"; exit 1; }
        command -v curl >/dev/null 2>&1 || { echo "ERROR: curl is required but not installed"; exit 1; }

        # Check if the directory exists
        if [ ! -d "$repoPath" ]; then
            echo "Repository directory does not exist, creating it now..."
            
            # Create the directory
            mkdir -p "$repoPath" || { echo "ERROR: Failed to create directory"; exit 1; }
            echo "Directory '$repoPath' created successfully."
            
            cd "$repoPath" || { echo "ERROR: Failed to change to directory"; exit 1; }

            # Initialize Git
            git init || { echo "ERROR: Failed to initialize git repository"; exit 1; }
            echo "Git repository initialized."

            # Fetch GitHub username dynamically
            echo "Fetching GitHub username..."
            _GITHUB_USER=$(curl -s -H "Authorization: token ${githubKey}" https://api.github.com/user | jq -r .login)

            # Ensure GitHub username was fetched correctly
            if [ -z "$_GITHUB_USER" ] || [ "$_GITHUB_USER" = "null" ]; then
                echo "ERROR: Failed to retrieve GitHub username. Check your token permissions."
                exit 1
            fi
            echo "GitHub username retrieved: $_GITHUB_USER"

            # Set up GitHub remote repository
            echo "Setting up remote repository..."
            git remote add origin "https://${_GITHUB_USER}:${githubKey}@github.com/${_GITHUB_USER}/${repoName}.git" || { 
                echo "ERROR: Failed to add remote origin. Repository might not exist."; 
                exit 1; 
            }

            # Configure Git user if not set
            if [ -z "$(git config user.email)" ]; then
                git config user.email "automated@example.com"
                git config user.name "Automated Process"
            fi

            # Create an empty commit to allow branch renaming
            git commit --allow-empty -m "Initial commit" || { echo "ERROR: Failed to create initial commit"; exit 1; }
            echo "Created initial commit."

            # Rename branch to 'main'
            git branch -m main || { echo "ERROR: Failed to rename branch"; exit 1; }
            echo "Branch renamed to 'main'."

            echo "Repository setup completed successfully."
        else
            echo "Directory '$repoPath' already exists."
            cd "$repoPath" || { echo "ERROR: Failed to change to existing directory"; exit 1; }
        fi

        # Check if pull script exists
        pullScript="$HOME/manager/bin/pull"
        if [ ! -f "$pullScript" ]; then
            echo "ERROR: Pull script not found at $pullScript"
            exit 1
        fi

        # Execute the pull script
        echo "Executing pull script..."
        bash "$pullScript" "${githubKey}" "$repoPath" || { echo "ERROR: Pull script failed"; exit 1; }
        echo "Pull operation completed successfully."
    `;
    break;

        case 'stop-containers':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && bash ~/manager/bin/stop ${githubKey} ${repoName} `;
            break;
        case 'start-containers':
            cmdToExecute = `cd ~/manager/manager-web-app/${repoName} && bash ~/manager/bin/start ${githubKey} ${repoName} `;
            break;
        default:
            return res.status(400).json({ error: 'Invalid command' });
    }
    
    exec(cmdToExecute, (error, stdout, stderr) => {
        if (error) {
            return res.status(500).json({ 
                output: `Error executing command: ${error.message}\n${stderr}` 
            });
        }
        
        res.json({ output: stdout });
    });
});

// Route for the main page
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// Start the server
app.listen(port, () => {
    console.log(`Manager CLI Web Interface running at http://localhost:${port}`);
});
EOL
echo "[+] Created server.js backend file"

# Create package.json file for Node.js dependencies
cat > "$APP_DIR/package.json" << 'EOL'
{
  "name": "manager-cli-web-interface",
  "version": "1.0.0",
  "description": "Web interface for Manager CLI operations",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "body-parser": "^1.20.2"
  }
}
EOL
echo "[+] Created package.json file"

# Check if Node.js is installed
if ! command -v node >/dev/null 2>&1; then
    echo "[!] Node.js is required but not installed."
    echo "    Please install Node.js from https://nodejs.org/"
    exit 1
fi

# Install dependencies
echo "[+] Installing dependencies..."
cd "$APP_DIR" && npm install
if [ $? -ne 0 ]; then
    echo "[!] Error installing dependencies. Please check npm error messages."
    exit 1
fi

# Start the application
echo "==============================================="
echo "[+] Starting Manager CLI Web Interface"
echo "[+] Press Ctrl+C to stop the server"
echo "==============================================="
cd "$APP_DIR" && node server.js

exit 0
