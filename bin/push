#!/bin/bash

# Ensure script exits on failure
set -e

# Check for required arguments
if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <GITHUB_ACCESS_TOKEN> <REPO_NAME>"
    exit 1
fi

# Assign input arguments
GITHUB_TOKEN="$1"
REPO_NAME="$2"
GITHUB_USER=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/user | jq -r .login)

# Validate GitHub user retrieval
if [ -z "$GITHUB_USER" ] || [ "$GITHUB_USER" == "null" ]; then
    echo "Error: Unable to authenticate with GitHub. Check your access token."
    exit 1
fi

# Change to the repository directory
if [ ! -d "$REPO_NAME" ]; then
    echo "Error: Directory $REPO_NAME does not exist."
    exit 1
fi

cd "$REPO_NAME"

# Untrack Dockerfile and exclude it locally
if [ -f Dockerfile ]; then
    if git ls-files --error-unmatch Dockerfile > /dev/null 2>&1; then
        echo "Untracking Dockerfile and excluding it locally..."
        git rm --cached Dockerfile
        mkdir -p .git/info
        grep -qxF "Dockerfile" .git/info/exclude || echo "Dockerfile" >> .git/info/exclude
    fi
fi

git rm -r --cached logs/
grep -qxF "logs/*" .git/info/exclude || echo "logs/*" >> .git/info/exclude



# Make sure we're on the main branch
echo "Checking out main branch..."
git checkout main

# Stage and commit everything else (Dockerfile will be ignored now)
git add .
git commit -m "$(date +'%Y-%m-%d %H:%M:%S') - Auto Commit"

# Force push
echo "Force pushing to GitHub..."
git push --force "https://$GITHUB_TOKEN@github.com/$GITHUB_USER/$REPO_NAME.git" main


echo "âœ… Remote main branch has been force reset to match local main branch."
