#!/bin/bash
# Ensure script exits on failure
set -e

# Check if yq is installed
if ! command -v yq &> /dev/null; then
    echo "‚ùå Error: yq is not installed. Please install it first."
    echo "   You can install it with: sudo apt-get install yq"
    sudo apt-get install yq -f
fi

# Create tmp directory if it doesn't exist
mkdir -p ./tmp
mkdir -p ./logs

# Start the main containers
echo "üöÄ Starting main containers..."
docker compose up -d
echo "‚úÖ Main containers started"

# Get all running container IDs
container_ids=$(docker ps -q)
echo "üì¶ Found $(echo "$container_ids" | wc -l) running containers"

# Loop through each container and execute the deploy script
for container_id in $container_ids; do
  container_name=$(docker inspect --format='{{.Name}}' "$container_id" | sed 's/^\///')
  echo "=========================="
  echo "üîß Processing container: $container_id ($container_name)"
  
  # Set the log file path for this container
  log_file="./logs/${container_name}.job.log"
  temp_log_file="./logs/${container_name}.temp.log"
  
  echo "üìÇ Running execution script in container $container_id"
  
  # Try to copy controller.yaml from container
  if docker cp "$container_id:/app/controller.yaml" "./tmp/tmp_controller.yaml" 2>/dev/null; then
    echo "‚úÖ Successfully copied controller.yaml from $container_id"
    
    # Parse schedule using yq
    schedule=$(yq -r '.schedule // ""' "./tmp/tmp_controller.yaml")
    rm -f "./tmp/tmp_controller.yaml"
    
    echo "**DEBUG: Schedule for $container_name is: '$schedule'"
    
    # Cron regex validation (5 space-separated fields)
    if [[ "$schedule" != '' ]]; then
      echo "‚è≠Ô∏è  Valid schedule found ‚Äî skipping direct run"
      docker exec "$container_id" bash bin/deploy > "logs/${container_name}.deploy.log" 2>&1 &
      continue
    fi
  else
    echo "‚ö†Ô∏è  No controller.yaml found or unable to copy ‚Äî proceeding with manual execution"
  fi
  
  echo "--- Job Output Begin ---"
  # Run the execution script
  if docker exec "$container_id" bash bin/run > "$temp_log_file" 2>&1; then
    # Filter out unimportant logs
    grep -v "Requirement already satisfied\|is already the newest version\|upgraded, 0 newly installed, 0 to remove\|WARNING: apt does not\|InRelease\|Installing\|Collecting" "$temp_log_file" > "$log_file" || true
    
    # Show the filtered log content
    cat "$log_file"
    echo "--- Job Output End ---"
    echo "‚úÖ Successfully ran execution script in container $container_id"
    echo "‚úÖ Filtered logs saved to $log_file"
    # Remove temporary log file
    rm -f "$temp_log_file"
  else
    # On error, keep the full log content
    mv "$temp_log_file" "$log_file"
    echo "--- Job Output End ---"
    echo "‚ùå Failed to run execution script in container $container_id"
    echo "‚ùå Check $log_file for details"
  fi
  echo "=========================="
done
echo "üéâ All containers processed and execution scripts completed"
