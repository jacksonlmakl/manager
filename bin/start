#!/bin/bash
# Ensure script exits on failure
set -e

# Check if yq is installed, install without force flag if needed
if ! command -v yq &> /dev/null; then
    echo "‚ùå yq not installed. Installing (this will only happen once)..."
    # Use -y for non-interactive and no force flag
    sudo apt-get update -qq
    sudo apt-get install -y yq -qq
    echo "‚úÖ yq installed"
fi

# Create tmp directory if it doesn't exist
mkdir -p ./tmp ./logs

# Start the main containers
echo "üöÄ Starting main containers..."
docker compose up -d
echo "‚úÖ Main containers started"

# Get all running container IDs
container_ids=$(docker ps -q)
container_count=$(echo "$container_ids" | grep -c "^" || echo 0)
echo "üì¶ Found $container_count running containers"

# Loop through each container and execute the deploy script
for container_id in $container_ids; do
  container_name=$(docker inspect --format='{{.Name}}' "$container_id" | sed 's/^\///')
  echo "=========================="
  echo "üîß Processing container: $container_name"
  
  # Set the log file paths
  log_file="./logs/${container_name}.job.log"
  temp_log_file="./logs/${container_name}.temp.log"
  
  # Try to copy controller.yaml from container - add timeout to prevent hanging
  if timeout 5s docker cp "$container_id:/app/controller.yaml" "./tmp/tmp_controller.yaml" 2>/dev/null; then
    echo "‚úÖ Found controller.yaml"
    
    # Parse schedule using yq - use simple check instead of regex
    schedule=$(yq -r '.schedule // ""' "./tmp/tmp_controller.yaml")
    rm -f "./tmp/tmp_controller.yaml"
    
    # Simple check if schedule exists
    if [[ -n "$schedule" ]]; then
      echo "‚è≠Ô∏è  Schedule found: $schedule ‚Äî running deploy script"
      docker exec "$container_id" bash bin/deploy > "logs/${container_name}.deploy.log" 2>&1 &
      continue
    fi
  else
    echo "‚ö†Ô∏è  No controller.yaml ‚Äî running execution script"
  fi
  
  echo "--- Running bin/run ---"
  # Run with timeout to prevent hanging
  if timeout 300s docker exec "$container_id" bash bin/run > "$temp_log_file" 2>&1; then
    # Fast filter using grep
    grep -v "Requirement already satisfied\|newest version\|upgraded\|WARNING: apt\|InRelease\|Installing\|Collecting" "$temp_log_file" > "$log_file" || true
    
    # Show filtered log
    cat "$log_file"
    echo "‚úÖ Execution complete"
    rm -f "$temp_log_file"
  else
    mv "$temp_log_file" "$log_file"
    echo "‚ùå Execution failed - see $log_file"
  fi
  echo "=========================="
done
echo "üéâ All containers processed"
