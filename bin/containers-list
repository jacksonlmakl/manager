#!/bin/bash

# Get the public IP address of the current host
PUBLIC_IP=$(curl -s ifconfig.me)

# Extract the first ports from the mappings in the docker-compose.yml file, excluding ports starting with 50, 15, or 23
PORTS=$(grep -oP '^\s+- "\K(?!50|15|23)\d+(?=:\d+")' docker-compose.yml)

# Extract container names
CONTAINERS=$(grep -oP 'container_name:\s*\K\S+' docker-compose.yml)

# Function to check if a port is active
check_port() {
    nc -z -w2 "$PUBLIC_IP" "$1" && echo "Active" || echo "Inactive"
}

# Function to check if Docker is installed and if containers are running inside the container
check_inner_docker() {
    # Check if Docker is installed inside the container
    if docker exec "$1" sh -c 'command -v docker' &>/dev/null; then
        # Docker is installed, now check if any containers are running inside
        if docker exec "$1" sh -c 'docker ps -q' 2>/dev/null | grep -q .; then
            echo "Active"
        else
            echo "Inactive"
        fi
    else
        # Docker is not installed inside the container
        echo "Inactive"
    fi
}

# Iterate through ports and container names together
index=0
for PORT in $PORTS; do
    CONTAINER=$(echo "$CONTAINERS" | sed -n "$((index+1))p")  # Get corresponding container
    STATUS=$(check_port "$PORT")  # Check port activity
    
    # Check if the outer container exists before checking inner Docker status
    if docker ps --format '{{.Names}}' | grep -q "^$CONTAINER$"; then
        CONTAINER_STATUS=$(check_inner_docker "$CONTAINER")
    else
        CONTAINER_STATUS="Not Running"
    fi
    
    echo "http://$PUBLIC_IP:$PORT - $STATUS - Container: $CONTAINER ($CONTAINER_STATUS)"
    ((index++))
done
